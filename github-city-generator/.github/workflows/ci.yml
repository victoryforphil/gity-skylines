name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: 'github-city-generator/package-lock.json'
        
    - name: Install dependencies
      working-directory: ./github-city-generator
      run: npm ci
      
    - name: Run linter
      working-directory: ./github-city-generator
      run: npm run lint
      
    - name: Run type check
      working-directory: ./github-city-generator
      run: npx tsc --noEmit
      
    - name: Run tests
      working-directory: ./github-city-generator
      run: npm run test:run
      
    - name: Generate test coverage
      working-directory: ./github-city-generator
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./github-city-generator/coverage/coverage-final.json
        directory: ./github-city-generator/coverage/
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'github-city-generator/package-lock.json'
        
    - name: Install dependencies
      working-directory: ./github-city-generator
      run: npm ci
      
    - name: Build application
      working-directory: ./github-city-generator
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: github-city-generator/dist/
        retention-days: 7

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'github-city-generator/package-lock.json'
        
    - name: Install dependencies
      working-directory: ./github-city-generator
      run: npm ci
      
    - name: Run security audit
      working-directory: ./github-city-generator
      run: npm audit --audit-level moderate
      
    - name: Run dependency check
      working-directory: ./github-city-generator
      run: npx depcheck --ignores="@types/*,@testing-library/*,vitest,jsdom"

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'github-city-generator/package-lock.json'
        
    - name: Install dependencies
      working-directory: ./github-city-generator
      run: npm ci
      
    - name: Run performance tests
      working-directory: ./github-city-generator
      run: |
        # Create a simple performance test
        node -e "
        const { performance } = require('perf_hooks');
        const { GridManager } = require('./dist/utils/GridManager.js');
        
        console.log('Running performance tests...');
        
        const start = performance.now();
        const grid = new GridManager(4);
        
        // Test allocation performance
        for (let i = 0; i < 1000; i++) {
          grid.allocatePosition(\`file\${i}.txt\`, \`building\${i}\`);
        }
        
        const end = performance.now();
        const duration = end - start;
        
        console.log(\`Allocated 1000 files in \${duration.toFixed(2)}ms\`);
        
        if (duration > 1000) {
          console.error('Performance test failed: took too long');
          process.exit(1);
        }
        
        console.log('Performance tests passed!');
        "
      
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'github-city-generator/package-lock.json'
        
    - name: Install dependencies
      working-directory: ./github-city-generator
      run: npm ci
      
    - name: Build for preview
      working-directory: ./github-city-generator
      run: npm run build
      
    - name: Deploy to Netlify (Preview)
      uses: nwtgck/actions-netlify@v2.0
      with:
        publish-dir: './github-city-generator/dist'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions"
        enable-pull-request-comment: true
        enable-commit-comment: true
        overwrites-pull-request-comment: true
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      if: env.NETLIFY_AUTH_TOKEN != ''

  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'github-city-generator/package-lock.json'
        
    - name: Install dependencies
      working-directory: ./github-city-generator
      run: npm ci
      
    - name: Build for production
      working-directory: ./github-city-generator
      run: npm run build
      
    - name: Deploy to Netlify (Production)
      uses: nwtgck/actions-netlify@v2.0
      with:
        publish-dir: './github-city-generator/dist'
        production-deploy: true
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Production deploy from GitHub Actions"
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      if: env.NETLIFY_AUTH_TOKEN != ''
      
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release from CI/CD pipeline
          
          Changes in this release:
          ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false
      if: success()

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: always()
    
    steps:
    - name: Notify on Success
      if: ${{ needs.test.result == 'success' && needs.build.result == 'success' && needs.security.result == 'success' }}
      run: |
        echo "✅ All checks passed successfully!"
        echo "- Tests: ${{ needs.test.result }}"
        echo "- Build: ${{ needs.build.result }}"
        echo "- Security: ${{ needs.security.result }}"
        
    - name: Notify on Failure
      if: ${{ needs.test.result == 'failure' || needs.build.result == 'failure' || needs.security.result == 'failure' }}
      run: |
        echo "❌ Some checks failed:"
        echo "- Tests: ${{ needs.test.result }}"
        echo "- Build: ${{ needs.build.result }}"
        echo "- Security: ${{ needs.security.result }}"
        exit 1